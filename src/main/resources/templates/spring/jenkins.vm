<div class="content-box">
    <h2>젠킨스 설치하기</h2>
    <div class="content-box-inner">
        <div class="cbi-title"><p>설치하기</p></div>
        <div>
            <p>젠킨스 홈페이지에서 <a href="https://jenkins.io/"><i class="fa fa-download"> 다운로드</i></a> 받는다.</p>
            <p>설치한 뒤에 jenkins.xml 파일을 열고 port를 변경해준다. Tomcat과 겹치기 때문</p>
            <p>http://localhost:수정한 포트번호 로 접속한다. (접속후 화면)</p>
            <div class="content-img"><img src="/img/jenkins_main.jpg"></div>
        </div>
    </div>
</div>
<div class="content-box">
    <h2>초기설정</h2>
    <div class="content-box-inner">
        <div class="cbi-title"><p>초기설정</p></div>
        <div>
            <p>Java, Git, Gradle 패스설정을 해준다.</p>
            <p>Jenkins 관리 > Global Tool Configuration</p>
            <div class="content-img"><img src="/img/jenkins_java.jpg"></div>
        </div>
    </div>
</div>
<div class="content-box">
    <h2>프로젝트 빌드하기</h2>
    <div class="content-box-inner">
        <div class="cbi-title"><p>프로젝트 빌드하기</p></div>
        <div>
            <p>jenkins에서 새로운 item을 클릭한다.</p>
            <p>소스 코드 관리 > none으로 설정한다. git repository로 설정할 수도 있다.</p>
            <p>Build > Invoke Gradle > Gradle Version (Default) > Tasks > war</p>
            <p>저장하고 최초 빌드한다.</p>
            <p>처음에는 실패한다. 하지만 jenkins/workspace/PROJECTNAME/ 폴더가 생긴다.</p>
            <p>그리고 여기에 프로젝트 소스를 복사해둔다.</p>
            <p>이때 프로젝트 폴더 안의 소스코드를 복사해 둔다.</p>
            <p>그리고 빌드를 하면 gradle 스크립트를 인식해서 빌드하게 된다.</p>
            <p>war 파일 이름 설정은 gradle <a href="/spring/intellij">레퍼런스</a>를 참고하자.</p>
            <p>build.gradle (gradle build script)에 war {} 설정이 되어있으면 여기 적힌 baseName = 'abc' version ='xyz' 가 합쳐진 이름으로 war가 생성된다.</p>
        </div>
    </div>
</div>
<div class="content-box">
    <h2>Spring Boot 빌드 및 톰캣 배포</h2>
    <div class="content-box-inner">
        <div class="cbi-title"><p>Spring Boot 빌드 배포</p></div>
        <div>
            <p>jenkins 플러그인 관리에 들어가서 Deploy to container Plugin을 설치한다.</p>
            <p>tomcat 설치된 경로에 들어가서 /conf/tomcat-users.xml 파일을 열고</p>
            <pre><code>&lt;role rolename="manager-gui"/&gt;
&lt;role rolename="manager-script"/&gt;
&lt;user username="로그인할 사용자 이름"
password="패스워드" roles="manager-gui,manager-script"/&gt;</code></pre>
            <p>하단에 위에 코드를 설정한다.</p>
            <p>다시 jenkins 로 돌아가서 빌드 후 조치를 설정한다.</p>
            <p>WAR/EAR files에는 war파일 경로를 적는다.</p>
            <p>Containers를 설정하고 위에 user name과 password를 톰캣 설정과 맞춘다.</p>
            <p>url은 배포할 '서버주소:포트번호'를 적어준다.</p>
            <div class="content-img"><img src="/img/jenkins_deploy.jpg"></div>
        </div>
    </div>
</div>
<div class="content-box">
    <h2>AWS 톰캣 배포 문제점</h2>
    <div class="content-box-inner">
        <div class="cbi-title"><p>톰캣 배포 문제점</p></div>
        <div>
            <p>Tomcat server.xml 수정하는 방법도 가능하지만 ROOT 컨텍스트로 배포하는게 가장 간편하다.</p>
            <p>위에서 보듯이 Tomcat manager로 배포하면서 Context path에 / 만 입력해주면 war는 gradle에서
                설정한 이름대로 생성되고 실제 배포시에는 ROOT.war로 변경되서 배포된다.</p>
            <p>AWS에 톰캣을 설치하고 매니저에 접속하려면 외부에서 접근이 안된다. 크로스 도메인, CSRF protection 설정이 있나보다.</p>
            <p>Catalina/localhost/manager.xml 을 만들고 아래 코드를 넣는다.</p>
            <pre><code>&lt;Context privileged="true" antiResourceLocking="false"
    docBase="${catalina.home}/webapps/manager"&gt;
        &lt;Valve className="org.apache.catalina.valves.RemoteAddrValve" allow="^.*$" /&gt;
&lt;/Context&gt;</code></pre>
        </div>
    </div>
</div>
<div class="content-box">
    <h2>톰캣 배포 더 알아보기</h2>
    <div class="content-box-inner">
        <div class="cbi-title"><p>Nginx 연동</p></div>
        <div>
            <p>현재 도메인으로 접근시 도메인명을 기준으로 포트포워딩을 해주고 있다.</p>
            <p>이런 방식으로 도메인으로 배포시 포트포워딩을 타고 톰캣매니저로 배포가 가능할 줄 알았지만 실패했다.</p>
            <p>대신에 도메인:8080 포트를 열어두고 AWS의 Security Group Inbound 규칙을 적용해 특정 IP에서만 배포가 가능하도록 해두었다.</p>
        </div>
    </div>
</div>
<div class="content-box">
    <h2>Nginx 포트포워딩 설정</h2>
    <div class="content-box-inner">
        <div class="cbi-title"><p>Nginx 포트포워딩</p></div>
        <div>
            <p>도메인을 기준으로 포트포워딩을 해주면 여러 프로젝트를 운영할 수 있다.</p>
            <p>기본 환경설정은 nginx 설치 폴더의 conf/nginx.conf 에 한다.</p>
            <pre><code>worker_processes  1;
events {
    worker_connections  1024;
}
http {
    server_names_hash_bucket_size 64; 이 설정이 있어야 도메인 구분 프록시가 제대로 동작한다.
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    # load balancing
    #    upstream loadbalancing {
    #          #local tomcat
    #          server 127.0.0.1:8080;
    #          #VM tomcat
    #          server 192.168.219.103:8080;
    #    }
    #local tomcat
    server {
        listen       80;
        server_name  mirlang2.ddns.net; 여기서 이 도메인으로 들어온 요청은 127 로 보낸다.
        location / {
            proxy_pass http://127.0.0.1:8080; http://가 꼭 있어야 한다.
        }
    }
    #VM tomcat // 가상머신 톰캣 프로젝트
    server {
        listen       80;
        server_name  dev-mirlang2.ddns.net;
        location / {
            proxy_pass http://192.168.219.103:8080;
        }
    }
}</code></pre>
        </div>
    </div>
</div>